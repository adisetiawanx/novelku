generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  compoundId         String    @unique @map("compound_id")
  userId             String    @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  user               User      @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("verification_requests")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  emailVerified   DateTime  @map("email_verified")
  profileImageUrl String    @map("profile_image_url")
  password        String?
  role            UserRole  @default(USER)
  badges          Badge[]   @relation("user_badges")
  accounts        Account[]
  sessions        Session[]
  novels          Novel[]
  chapters        Chapter[]
  coverImage      MediaFile @relation(fields: [profileImageUrl], references: [url])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Badge {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("user_badges")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("badges")
}

enum NovelType {
  WEB_NOVEL_CHINA
  WEB_NOVEL_KOREA
  WEB_NOVEL_JAPAN
}

enum NovelStatus {
  COMPLETED
  ONGOING
  HIATUS
}

model Novel {
  id               String       @id @default(cuid())
  title            String
  alternativeTitle String?      @map("alternate_title")
  slug             String       @unique
  synopsis         String?      @db.Text
  rating           Decimal?     @db.Decimal(1, 1)
  type             NovelType?
  year             String?
  status           NovelStatus?
  userId           String       @map("user_id")
  imageUrl         String       @map("image_url")
  chapters         Chapter[]
  authors          Author[]     @relation("novel_authors")
  genres           Genre[]      @relation("novel_genres")
  tags             Tag[]        @relation("novel_tags")
  comments         Comment[]
  user             User         @relation(fields: [userId], references: [id])
  coverImage       MediaFile    @relation(fields: [imageUrl], references: [url])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("novels")
}

enum MediaFileType {
  IMAGE
  VIDEO
  AUDIO
}

model MediaFile {
  id     String        @id @default(cuid())
  name   String
  type   MediaFileType
  size   Int
  url    String        @unique
  novels Novel[]
  User   User[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("media_files")
}

model Chapter {
  id      String @id @default(cuid())
  title   String
  number  Int
  text    String @db.Text
  novelId String @map("novel_id")
  userId  String @map("user_id")
  novel   Novel  @relation(fields: [novelId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("chapters")
}

model Author {
  id     String  @id @default(cuid())
  name   String  @unique
  novels Novel[] @relation("novel_authors")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("authors")
}

model Genre {
  id     String  @id @default(cuid())
  name   String  @unique
  novels Novel[] @relation("novel_genres")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("genres")
}

model Tag {
  id     String  @id @default(cuid())
  name   String  @unique
  novels Novel[] @relation("novel_tags")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tags")
}

model Comment {
  id   String @id @default(cuid())
  text String @db.Text

  novelId  String    @map("post_id")
  novel    Novel     @relation(fields: [novelId], references: [id])
  parentId String?   @map("parent_id")
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentToComment")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}
